{{- /*

# NOTE: This script evaluates the availability of the config data. This
# (sensitive) data relies on the encryption configuration being enabled in order
# to be restored to the config file (chezmoi.toml). When it finds that the
# encryption is enabled, but the config data is not available, it calls "chezmoi
# init" and exits. The call to the init command will ensure that the config data
# is restored and available. This script ensures that the init command is called
# whenever it is needed. This allows for "healing" of the config data within the
# config file, should any of it get disabled, modified, or erased.

# HACK: Calling the init command here while apply command is already running
# will cause a "timeout obtaining persistent state lock" error. We aren't really
# needing to modify persistent state here, but rather we simply want to call
# init so that it can (re-)build our config file. To work around this we are
# pointing persistent state to a temporary file for the init call (if called).

*/ -}}

{{- if and
      (includeTemplate "is_encryption_enabled" .)
      (not (hasKey .flags "isPersonalHost")) -}}
#!/bin/bash

set -eufo pipefail

temp_file="$(mktemp)"
trap 'rm -f "$temp_file"' EXIT INT TERM HUP
chezmoi init --persistent-state="$temp_file"
{{  end -}}
