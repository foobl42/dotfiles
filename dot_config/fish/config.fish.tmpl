# Ensure XDG environment
set -gx XDG_BIN_HOME "$HOME/.local/bin"
set -gx XDG_CACHE_HOME "$HOME/.cache"
set -gx XDG_CONFIG_HOME "$HOME/.config"
set -gx XDG_DATA_HOME "$HOME/.local/share"
set -gx XDG_STATE_HOME "$HOME/.local/state"
if test -n "$TMPDIR" -a -d "$TMPDIR"
    set -gx XDG_RUNTIME_DIR "$TMPDIR"
else
    set -gx XDG_RUNTIME_DIR "/tmp"
end

{{- $brewDir := includeTemplate "get_command_dir" "brew" -}}
{{- $hasRustup := false -}}
{{- if not (empty $brewDir)  }}

{{-   $hasRustup = not (empty (includeTemplate "is_command_reachable"
        "rustup"))  }}
{{-   if and $hasRustup .flags.isPersonalHost .flags.isPersonalUser  }}
{{-     $cargoDir := output "bash" "-c"
          "brew --prefix rustup 2>/dev/null || true"  }}
{{-     if not (empty $cargoDir)  }}
{{-       $cargoDir = joinPath (trim $cargoDir) "bin"  }}

# Add rustup's bin dir to path PRIOR to homebrew's bin dir
fish_add_path -P {{ $cargoDir }}
{{-     end  }}
{{-   end  }}

# Wire-up homebrew environment
{{- $brewBin := joinPath $brewDir "brew"  }}
if test -x {{ $brewBin }}
    {{ $brewBin }} shellenv fish | source
end
set -gx HOMEBREW_NO_ANALYTICS 1
set -gx HOMEBREW_NO_ENV_HINTS 1
{{- end  }}

{{- if and
      (includeTemplate "is_command_reachable" "orbctl")
      .flags.isPersonalHost .flags.isPersonalUser  }}

# Setup orbstack/docker environment
if command -v orbctl >/dev/null 2>&1
    if test -r "$HOME/.orbstack/shell/init.fish"
        source "$HOME/.orbstack/shell/init.fish" 2>/dev/null || true
    end
    set -gx DOCKER_CONFIG "$XDG_CONFIG_HOME/docker"
end
{{- end  }}

{{-   if and
        (includeTemplate "is_command_reachable" "python3")
        .flags.isPersonalHost .flags.isPersonalUser  }}

# Ensure a python virtual environment
if command -v python3 >/dev/null 2>&1
    if not test -r "$XDG_CONFIG_HOME/venv/bin/activate.fish"
        python3 -m venv install "$XDG_CONFIG_HOME/venv"
    end
    set -gx VIRTUAL_ENV_DISABLE_PROMPT "1"
    source "$XDG_CONFIG_HOME/venv/bin/activate.fish"
end
{{-   end  }}

# Prepend user directories to path
{{- if and $hasRustup .flags.isPersonalHost .flags.isPersonalUser  }}
fish_add_path -Pm "$XDG_DATA_HOME/cargo/bin"
{{- end  }}
fish_add_path -Pm "$XDG_BIN_HOME"

# Exit unless interactive
status is-interactive || exit

# Setup user environment
set -gx EDITOR "vim"
set -gx PAGER "less -R"
set -gx TERM "xterm-256color"
set -gx VISUAL "$EDITOR"

{{- if .flags.isPersonalUser  }}

# Set fish options
set -g fish_greeting
set -g fish_key_bindings fish_vi_key_bindings
{{- end  }}

# Setup misc environment
{{- if and $hasRustup .flags.isPersonalHost .flags.isPersonalUser  }}
set -gx CARGO_HOME "$XDG_DATA_HOME/cargo"
{{- end  }}
{{- if and
      (includeTemplate "is_command_reachable" "ghcup")
      .flags.isPersonalHost .flags.isPersonalUser  }}
set -gx GHCUP_USE_XDG_DIRS "true"
{{- end  }}
set -gx LESSHISTFILE "$XDG_STATE_HOME/less/history"
{{- if and $hasRustup .flags.isPersonalHost .flags.isPersonalUser  }}
set -gx RUSTUP_HOME "$XDG_DATA_HOME/rustup"
{{- end  }}
{{- if and
      (includeTemplate "is_command_reachable" "sqlite3")
      .flags.isPersonalHost .flags.isPersonalUser  }}
set -gx SQLITE_HISTORY "$XDG_STATE_HOME/sqlite/history"
{{- end  }}

{{- if and
      (includeTemplate "is_command_reachable" "direnv")
      .flags.isPersonalHost .flags.isPersonalUser  }}

# Wire-up direnv
if command -v direnv >/dev/null 2>&1
    direnv hook fish | source
end
{{- end  }}

{{- if and
      (includeTemplate "is_command_reachable" "fzf")
      .flags.isPersonalUser  }}

# Wire-up fzf
if command -v fzf >/dev/null 2>&1
    fzf --fish | source
end
{{- end  }}

{{- if and
      (includeTemplate "is_command_reachable" "atuin")
      .flags.isPersonalUser  }}

# Wire-up atuin
# Note: do this after fzf so atuin gets the ctrl+r keybind
if command -v atuin >/dev/null 2>&1
    atuin init fish --disable-up-arrow | source
end
{{- end  }}

{{- if and
      (includeTemplate "is_command_reachable" "zoxide")
      .flags.isPersonalUser  }}

# Wire-up zoxide
if command -v zoxide >/dev/null 2>&1
    zoxide init fish | source
end
{{- end  }}
